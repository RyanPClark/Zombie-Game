#version 400 core

in vec3 position;
in vec2 textureCoords;
in vec3 normal;
in vec3 position1;
in vec3 normal1;

out vec2 pass_textureCoords;
out vec3 surfaceNormal;
out vec3 toLightVector;
out vec3 toCameraVector;

uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightPosition;
uniform float useFakeLighting;

uniform float tween;

uniform vec4 plane;

void main(void){

	vec3 newPosition;
	newPosition.xyz = mix(position, position1, tween);

	vec4 worldPosition = transformationMatrix * vec4(newPosition, 1.0);
	
	gl_ClipDistance[0] = dot(worldPosition, plane);
	
	vec4 positionRelativeToCamera = viewMatrix * worldPosition;
	gl_Position = projectionMatrix * positionRelativeToCamera;
	pass_textureCoords = (textureCoords);
	
	vec3 actualNormal = normal;
	vec3 actualNormal1 = normal1;
	if(useFakeLighting > 0.5){
		actualNormal = vec3(0.0,1.0,0.0);
		actualNormal1 = vec3(0,1.0,0);
	}
	
	vec3 newNormal = mix(actualNormal, actualNormal1, tween);
	
	surfaceNormal = (transformationMatrix * vec4(actualNormal, 0.0)).xyz;
	toLightVector = lightPosition - worldPosition.xyz;
	toCameraVector = (inverse(viewMatrix) * vec4(0.0,0.0,0.0,1.0)).xyz-worldPosition.xyz;
}