#version 400 core

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector[3];
in vec3 toCameraVector;

out vec4 out_Color;

uniform sampler2D textureSampler;
uniform vec3 lightColor[3];
uniform float shine_damper;
uniform float reflectivity;
uniform float intensity[3];
uniform vec3 attenuation[3];

uniform float useSpecular;

void main(void){

	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitVectorToCamera = normalize(toCameraVector);
	
	vec3 totalDiffuse = vec3(0.0);
	vec3 totalSpecular = vec3(0.0);
	
	for(int i = 0; i < 3; i++){
	
		float distance = length(toLightVector[i]);
		float attFactor = attenuation[i].x + (attenuation[i].y*distance) + (attenuation[i].z * distance*distance);
		vec3 unitLightVector = normalize(toLightVector[i]);
		vec3 lightDirection = -unitLightVector;
		vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
		float nDotl = dot(unitNormal,unitLightVector);
		
		if(useSpecular > 0.5){
		
			float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
			specularFactor = max(specularFactor, 0.0);
			float dampedValue = pow(specularFactor, shine_damper);
			totalSpecular = totalSpecular + (dampedValue * lightColor[i] * reflectivity)/attFactor;
			
		}
		
		totalDiffuse = totalDiffuse + (intensity[i] * nDotl * lightColor[i])/attFactor;
	
	}
	
	totalDiffuse = max(totalDiffuse, 0.3);
	
	vec4 textureColor = texture(textureSampler, pass_textureCoords);
	
	if(textureColor.a <0.5){
		discard;
	}
	
	out_Color = vec4(totalDiffuse,1.0) * textureColor + vec4(totalSpecular, 1.0);
	
}