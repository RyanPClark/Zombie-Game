#version 400 core

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;
in float newIntensity;

out vec4 out_Color;

uniform sampler2D textureSampler;
uniform vec3 lightColor;
uniform float shine_damper;
uniform float reflectivity;
uniform float intensity;

void main(void){

	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitLightVector = normalize(toLightVector);
	vec3 unitVectorToCamera = normalize(toCameraVector);
	vec3 lightDirection = -unitLightVector;
	vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
	
	float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
	specularFactor = max(specularFactor, 0.0);
	float dampedValue = pow(specularFactor, shine_damper);
	vec3 finalSpecularValue = dampedValue * lightColor * reflectivity;
	
	float nDotl = dot(unitNormal,unitLightVector);
	float brightness = max(nDotl, 0.4);
	vec3 diffuse = intensity * brightness * lightColor;
	
	vec4 textureColor = texture(textureSampler, pass_textureCoords);
	
	if(textureColor.a <0.5){
		discard;
	}
	
	out_Color = vec4(diffuse,1.0) * textureColor + vec4(finalSpecularValue, 1.0);
	
}